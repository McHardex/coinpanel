[{"/Users/adebisioluwabukunmi/Desktop/coinpanel/src/index.js":"1","/Users/adebisioluwabukunmi/Desktop/coinpanel/src/App.js":"2","/Users/adebisioluwabukunmi/Desktop/coinpanel/src/reportWebVitals.js":"3","/Users/adebisioluwabukunmi/Desktop/coinpanel/src/components/TVChartContainer/index.jsx":"4","/Users/adebisioluwabukunmi/Desktop/coinpanel/src/components/TVChartContainer/api/index.js":"5","/Users/adebisioluwabukunmi/Desktop/coinpanel/src/components/TVChartContainer/api/historyProvider.js":"6","/Users/adebisioluwabukunmi/Desktop/coinpanel/src/components/TVChartContainer/api/stream.js":"7"},{"size":500,"mtime":1611663799958,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1611743475995,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1611663799959,"results":"11","hashOfConfig":"9"},{"size":2293,"mtime":1611743680029,"results":"12","hashOfConfig":"9"},{"size":3613,"mtime":1611744297925,"results":"13","hashOfConfig":"9"},{"size":1486,"mtime":1611744111426,"results":"14","hashOfConfig":"9"},{"size":4021,"mtime":1611743933328,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1lpv82c",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"/Users/adebisioluwabukunmi/Desktop/coinpanel/src/index.js",[],["36","37"],"/Users/adebisioluwabukunmi/Desktop/coinpanel/src/App.js",[],"/Users/adebisioluwabukunmi/Desktop/coinpanel/src/reportWebVitals.js",[],"/Users/adebisioluwabukunmi/Desktop/coinpanel/src/components/TVChartContainer/index.jsx",["38"],"import React, { useEffect } from \"react\";\nimport \"./index.css\";\nimport Datafeed from \"./api/\";\n\nconst getLanguageFromURL = () => {\n  const regex = new RegExp(\"[\\\\?&]lang=([^&#]*)\");\n  const results = regex.exec(window.location.search);\n  return results === null\n    ? null\n    : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n};\n\nexport const TVChartContainer = () => {\n  const defaultProps = {\n    symbol: \"Binance:BTC/USDT\",\n    interval: \"15\",\n    containerId: \"tv_chart_container\",\n    libraryPath: \"/charting_library/\",\n    chartsStorageUrl: \"https://saveload.tradingview.com\",\n    chartsStorageApiVersion: \"1.1\",\n    clientId: \"tradingview.com\",\n    userId: \"public_user_id\",\n    fullscreen: false,\n    autosize: true,\n    studiesOverrides: {},\n  };\n\n  useEffect(() => {\n    const widgetOptions = {\n      debug: false,\n      symbol: defaultProps.symbol,\n      datafeed: Datafeed,\n      interval: defaultProps.interval,\n      container_id: defaultProps.containerId,\n      library_path: defaultProps.libraryPath,\n      locale: getLanguageFromURL() || \"en\",\n      disabled_features: [\"use_localstorage_for_settings\"],\n      enabled_features: [\"study_templates\"],\n      charts_storage_url: defaultProps.chartsStorageUrl,\n      charts_storage_api_version: defaultProps.chartsStorageApiVersion,\n      client_id: defaultProps.clientId,\n      user_id: defaultProps.userId,\n      fullscreen: defaultProps.fullscreen,\n      autosize: defaultProps.autosize,\n      studies_overrides: defaultProps.studiesOverrides,\n      overrides: {\n        \"mainSeriesProperties.showCountdown\": true,\n        \"paneProperties.background\": \"#131722\",\n        \"paneProperties.vertGridProperties.color\": \"#363c4e\",\n        \"paneProperties.horzGridProperties.color\": \"#363c4e\",\n        \"symbolWatermarkProperties.transparency\": 90,\n        \"scalesProperties.textColor\": \"#AAA\",\n        \"mainSeriesProperties.candleStyle.wickUpColor\": \"#336854\",\n        \"mainSeriesProperties.candleStyle.wickDownColor\": \"#7f323f\",\n      },\n    };\n\n    if (window.TradingView) {\n      const widget = new window.TradingView.widget(widgetOptions);\n\n      widget.onChartReady(() => {\n        console.log(\"Chart has loaded!\");\n      });\n    }\n  }, []);\n\n  return <div id={defaultProps.containerId} className={\"TVChartContainer\"} />;\n};\n","/Users/adebisioluwabukunmi/Desktop/coinpanel/src/components/TVChartContainer/api/index.js",["39"],"import historyProvider from \"./historyProvider\";\nimport stream from \"./stream\";\n\nconst supportedResolutions = [\n  \"1\",\n  \"3\",\n  \"5\",\n  \"15\",\n  \"30\",\n  \"60\",\n  \"120\",\n  \"240\",\n  \"D\",\n];\n\nconst config = {\n  supported_resolutions: supportedResolutions,\n};\n\nexport default {\n  onReady: (cb) => {\n    console.log(\"=====onReady running\");\n    setTimeout(() => cb(config), 0);\n  },\n  searchSymbols: (userInput, exchange, symbolType, onResultReadyCallback) => {\n    console.log(userInput, 'userInput userInput')\n    console.log(\"====Search Symbols running\");\n  },\n  resolveSymbol: (\n    symbolName,\n    onSymbolResolvedCallback,\n    onResolveErrorCallback\n  ) => {\n    // expects a symbolInfo object in response\n    console.log(\"======resolveSymbol running\");\n    const split_data = symbolName.split(/[:/]/);\n    const symbol_stub = {\n      name: symbolName,\n      description: \"\",\n      type: \"crypto\",\n      session: \"24x7\",\n      timezone: \"Etc/UTC\",\n      ticker: symbolName,\n      exchange: split_data[0],\n      minmov: 1,\n      pricescale: 100000000,\n      has_intraday: true,\n      intraday_multipliers: [\"1\", \"60\"],\n      supported_resolution: supportedResolutions,\n      volume_precision: 8,\n      data_status: \"streaming\",\n    };\n\n    if (split_data[2].match(/USD|EUR|JPY|AUD|GBP|KRW|CNY/)) {\n      symbol_stub.pricescale = 100;\n    }\n    setTimeout(function () {\n      onSymbolResolvedCallback(symbol_stub);\n      console.log(\"Resolving that symbol....\", symbol_stub);\n    }, 0);\n\n    // onResolveErrorCallback('Not feeling it today')\n  },\n  getBars: function (\n    symbolInfo,\n    resolution,\n    from,\n    to,\n    onHistoryCallback,\n    onErrorCallback,\n    firstDataRequest\n  ) {\n    console.log(\"=====getBars running\");\n    // console.log('function args',arguments)\n    // console.log(`Requesting bars between ${new Date(from * 1000).toISOString()} and ${new Date(to * 1000).toISOString()}`)\n    historyProvider\n      .getBars(symbolInfo, resolution, from, to, firstDataRequest)\n      .then((bars) => {\n        if (bars.length) {\n          onHistoryCallback(bars, { noData: false });\n        } else {\n          onHistoryCallback(bars, { noData: true });\n        }\n      })\n      .catch((err) => {\n        console.log({ err });\n        onErrorCallback(err);\n      });\n  },\n  subscribeBars: (\n    symbolInfo,\n    resolution,\n    onRealtimeCallback,\n    subscribeUID,\n    onResetCacheNeededCallback\n  ) => {\n    console.log(\"=====subscribeBars runnning\");\n    stream.subscribeBars(\n      symbolInfo,\n      resolution,\n      onRealtimeCallback,\n      subscribeUID,\n      onResetCacheNeededCallback\n    );\n  },\n  unsubscribeBars: (subscriberUID) => {\n    console.log(\"=====unsubscribeBars running\");\n\n    stream.unsubscribeBars(subscriberUID);\n  },\n  calculateHistoryDepth: (resolution, resolutionBack, intervalBack) => {\n    //optional\n    console.log(\"=====calculateHistoryDepth running\");\n    // while optional, this makes sure we request 24 hours of minute data at a time\n    // CryptoCompare's minute data endpoint will throw an error if we request data beyond 7 days in the past, and return no data\n    return resolution < 60\n      ? { resolutionBack: \"D\", intervalBack: \"1\" }\n      : undefined;\n  },\n  getMarks: (symbolInfo, startDate, endDate, onDataCallback, resolution) => {\n    //optional\n    console.log(\"=====getMarks running\");\n  },\n  getTimeScaleMarks: (\n    symbolInfo,\n    startDate,\n    endDate,\n    onDataCallback,\n    resolution\n  ) => {\n    //optional\n    console.log(\"=====getTimeScaleMarks running\");\n  },\n  getServerTime: (cb) => {\n    console.log(\"=====getServerTime running\");\n  },\n};\n","/Users/adebisioluwabukunmi/Desktop/coinpanel/src/components/TVChartContainer/api/historyProvider.js",["40"],"const rp = require(\"request-promise\").defaults({ json: true });\n\nconst api_root = \"https://min-api.cryptocompare.com\";\nconst history = {};\n\nexport default {\n  history: history,\n\n  getBars: async (symbolInfo, resolution, from, to, first, limit) => {\n    const split_symbol = symbolInfo.name.split(/[:/]/);\n    const url =\n      resolution === \"D\"\n        ? \"/data/histoday\"\n        : resolution >= 60\n        ? \"/data/histohour\"\n        : \"/data/histominute\";\n    const qs = {\n      e: split_symbol[0],\n      fsym: split_symbol[1],\n      tsym: split_symbol[2],\n      toTs: to ? to : \"\",\n      limit: limit ? limit : 2000,\n    };\n\n    const data = await rp({\n      url: `${api_root}${url}`,\n      qs,\n    });\n    if (data.Response && data.Response === \"Error\") {\n      console.log(\"CryptoCompare API error:\", data.Message);\n      return [];\n    }\n    if (data.Data.length) {\n      console.log(\n        `Actually returned: ${new Date(\n          data.TimeFrom * 1000\n        ).toISOString()} - ${new Date(data.TimeTo * 1000).toISOString()}`\n      );\n      const bars = data.Data.map((el) => {\n        return {\n          time: el.time * 1000,\n          low: el.low,\n          high: el.high,\n          open: el.open,\n          close: el.close,\n          volume: el.volumefrom,\n        };\n      });\n      if (first) {\n        const lastBar = bars[bars.length - 1];\n        history[symbolInfo.name] = { lastBar: lastBar };\n      }\n      return bars;\n    } else {\n      return [];\n    }\n  },\n};\n","/Users/adebisioluwabukunmi/Desktop/coinpanel/src/components/TVChartContainer/api/stream.js",["41"],"import historyProvider from \"./historyProvider.js\";\nimport io from \"socket.io-client\";\n\nconst socket_url = \"wss://streamer.cryptocompare.com\";\nconst socket = io(socket_url);\n\n// keep track of subscriptions\nconst _subs = [];\n\nexport default {\n  subscribeBars: function (symbolInfo, resolution, updateCb, uid, resetCache) {\n    const channelString = createChannelString(symbolInfo);\n    socket.emit(\"SubAdd\", { subs: [channelString] });\n\n    const newSub = {\n      channelString,\n      uid,\n      resolution,\n      symbolInfo,\n      lastBar: historyProvider.history[symbolInfo.name].lastBar,\n      listener: updateCb,\n    };\n    _subs.push(newSub);\n  },\n  unsubscribeBars: function (uid) {\n    const subIndex = _subs.findIndex((e) => e.uid === uid);\n    if (subIndex === -1) {\n      return;\n    }\n    const sub = _subs[subIndex];\n    socket.emit(\"SubRemove\", { subs: [sub.channelString] });\n    _subs.splice(subIndex, 1);\n  },\n};\n\nsocket.on(\"connect\", () => {\n  console.log(\"===Socket connected\");\n});\nsocket.on(\"disconnect\", (e) => {\n  console.log(\"===Socket disconnected:\", e);\n});\nsocket.on(\"error\", (err) => {\n  console.log(\"====socket error\", err);\n});\n\nsocket.on(\"m\", (e) => {\n  // here we get all events the CryptoCompare connection has subscribed to\n  // we need to send this new data to our subscribed charts\n  const _data = e.split(\"~\");\n  if (_data[0] === \"3\") {\n    // console.log('Websocket Snapshot load event complete')\n    return;\n  }\n  const data = {\n    sub_type: parseInt(_data[0], 10),\n    exchange: _data[1],\n    to_sym: _data[2],\n    from_sym: _data[3],\n    trade_id: _data[5],\n    ts: parseInt(_data[6], 10),\n    volume: parseFloat(_data[7]),\n    price: parseFloat(_data[8]),\n  };\n\n  const channelString = `${data.sub_type}~${data.exchange}~${data.to_sym}~${data.from_sym}`;\n  console.log(channelString, \"channelString\\n\\n\\n\\n\\n\");\n\n  const sub = _subs.find((e) => e.channelString === channelString);\n\n  if (sub) {\n    // disregard the initial catchup snapshot of trades for already closed candles\n    if (data.ts < sub.lastBar.time / 1000) {\n      return;\n    }\n\n    const _lastBar = updateBar(data, sub);\n\n    // send the most recent bar back to TV's realtimeUpdate callback\n    sub.listener(_lastBar);\n    // update our own record of lastBar\n    sub.lastBar = _lastBar;\n  }\n});\n\n// Take a single trade, and subscription record, return updated bar\nconst updateBar = (data, sub) => {\n  const lastBar = sub.lastBar;\n  let resolution = sub.resolution;\n  if (resolution.includes(\"D\")) {\n    // 1 day in minutes === 1440\n    resolution = 1440;\n  } else if (resolution.includes(\"W\")) {\n    // 1 week in minutes === 10080\n    resolution = 10080;\n  }\n  const coeff = resolution * 60;\n  // console.log({coeff})\n  const rounded = Math.floor(data.ts / coeff) * coeff;\n  const lastBarSec = lastBar.time / 1000;\n  let _lastBar;\n\n  if (rounded > lastBarSec) {\n    // create a new candle, use last close as open **PERSONAL CHOICE**\n    _lastBar = {\n      time: rounded * 1000,\n      open: lastBar.close,\n      high: lastBar.close,\n      low: lastBar.close,\n      close: data.price,\n      volume: data.volume,\n    };\n  } else {\n    // update lastBar candle!\n    if (data.price < lastBar.low) {\n      lastBar.low = data.price;\n    } else if (data.price > lastBar.high) {\n      lastBar.high = data.price;\n    }\n\n    lastBar.volume += data.volume;\n    lastBar.close = data.price;\n    _lastBar = lastBar;\n  }\n  return _lastBar;\n};\n\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n// takes symbolInfo object as input and creates the subscription string to send to CryptoCompare\nconst createChannelString = (symbolInfo) => {\n  var channel = symbolInfo.name.split(/[:/]/);\n  const exchange = channel[0] === \"GDAX\" ? \"Binance\" : channel[0];\n  const to = channel[2];\n  const from = channel[1];\n  // subscribe to the CryptoCompare trade channel for the pair and exchange\n  return `0~${capitalizeFirstLetter(\n    exchange.toLocaleLowerCase()\n  )}~${from}~${to}`;\n};\n",["42","43"],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":65,"column":6,"nodeType":"50","endLine":65,"endColumn":8,"suggestions":"51"},{"ruleId":"52","severity":1,"message":"53","line":20,"column":1,"nodeType":"54","endLine":137,"endColumn":3},{"ruleId":"52","severity":1,"message":"53","line":6,"column":1,"nodeType":"54","endLine":58,"endColumn":3},{"ruleId":"52","severity":1,"message":"53","line":10,"column":1,"nodeType":"54","endLine":34,"endColumn":3},{"ruleId":"44","replacedBy":"55"},{"ruleId":"46","replacedBy":"56"},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'defaultProps.autosize', 'defaultProps.chartsStorageApiVersion', 'defaultProps.chartsStorageUrl', 'defaultProps.clientId', 'defaultProps.containerId', 'defaultProps.fullscreen', 'defaultProps.interval', 'defaultProps.libraryPath', 'defaultProps.studiesOverrides', 'defaultProps.symbol', and 'defaultProps.userId'. Either include them or remove the dependency array.","ArrayExpression",["59"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["57"],["58"],"no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},"Update the dependencies array to be: [defaultProps.autosize, defaultProps.chartsStorageApiVersion, defaultProps.chartsStorageUrl, defaultProps.clientId, defaultProps.containerId, defaultProps.fullscreen, defaultProps.interval, defaultProps.libraryPath, defaultProps.studiesOverrides, defaultProps.symbol, defaultProps.userId]",{"range":"62","text":"63"},[2205,2207],"[defaultProps.autosize, defaultProps.chartsStorageApiVersion, defaultProps.chartsStorageUrl, defaultProps.clientId, defaultProps.containerId, defaultProps.fullscreen, defaultProps.interval, defaultProps.libraryPath, defaultProps.studiesOverrides, defaultProps.symbol, defaultProps.userId]"]